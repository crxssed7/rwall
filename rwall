#!/usr/bin/python

"""Randomly set the wallpaper using wal"""
# To run in cron:
# echo $DISPLAY
# echo $DBUS_SESSION_BUS_ADDRESS
# */15 * * * * DISPLAY=<display> DBUS_SESSION_BUS_ADDRESS=<dbus> PATH="/usr/bin:/path/to/rwall" RWALL_WALLPAPERS="/path/to/wallpapers" rwall -p -rp -b -z
import os
import random
import subprocess
import sys
import shutil
import argparse

MODULE_DIR = f"{os.path.dirname(os.path.realpath(__file__))}/modules"
WALLPAPER_DIR = os.getenv("RWALL_WALLPAPERS")

if WALLPAPER_DIR is None:
    print("rwall wallpaper directory not set")
    sys.exit(1)

def get_current_wallpaper():
    """Get the path of the current wallpaper"""
    wal_wallpaper_path = os.path.expanduser("~/.cache/wal/wal")
    with open(wal_wallpaper_path, "r", encoding="utf-8") as wal_file:
        current = wal_file.read().strip()
        return os.path.basename(current)

def reload_bspwm():
    """Resets the colour of BSPWM borders"""
    # We could use `bspc wm -r` but this resets the cursor to the center of the screen
    wal_colors = os.path.expanduser("~/.cache/wal/colors")
    with open(wal_colors, "r", encoding="utf-8") as f:
        colors = f.read().splitlines()
    subprocess.run(["bspc", "config", "normal_border_color", colors[1]], check=True)
    subprocess.run(["bspc", "config", "active_border_color", colors[2]], check=True)
    subprocess.run(["bspc", "config", "focused_border_color", colors[15]], check=True)
    subprocess.run(["bspc", "config", "presel_feedback_color", colors[1]], check=True)

def get_wallpaper_fullpath(wallpaper):
    """Get the fullpath of the given wallpaper"""
    return os.path.join(WALLPAPER_DIR, wallpaper)

def force_refresh_zed():
    """Generate the wal theme for Zed"""
    source = f"{MODULE_DIR}/zed-theme-wal/themes/wal-theme.json"
    destination = os.path.expanduser("~/.config/zed/themes/wal-theme.json")
    shutil.copy(source, destination)

def parse_args():
    parser = argparse.ArgumentParser("Randomly set a wallpaper using wal")
    parser.add_argument("-p", "--polybar", action="store_true", help="Adds wal colours to an ini file stored in the polybar config directory")
    parser.add_argument("-rp", "--powermenu", action="store_true", help="Generate styles for Rofi Powermenu")
    parser.add_argument("-b", "--bspwm", action="store_true", help="Reload BSPWM after wallpaper has been set")
    parser.add_argument("-z", "--zed", action="store_true", help="Generate Zed theme")
    return parser.parse_args()

CURRENT_WALLPAPER = get_current_wallpaper()
ARGS = parse_args()

artwork = [f for f in os.listdir(WALLPAPER_DIR) if os.path.isfile(os.path.join(WALLPAPER_DIR, f))]
try:
    artwork.remove(CURRENT_WALLPAPER)
except ValueError:
    pass

random_wallpaper = random.choice(artwork)
wallpaper_path = get_wallpaper_fullpath(random_wallpaper)

subprocess.run(["wal", "-i", wallpaper_path], check=True)

if ARGS.polybar:
    subprocess.run([f"{MODULE_DIR}/polybar"], check=True)

if ARGS.powermenu:
    subprocess.run([f"{MODULE_DIR}/powermenu"], check=True)

if ARGS.bspwm:
    reload_bspwm()

if ARGS.zed:
    subprocess.run([f"{MODULE_DIR}/zed-theme-wal/generate_theme"], check=True)
    force_refresh_zed()

print(f"Wallpaper set to: {wallpaper_path}")
