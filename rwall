#!/usr/bin/python

"""Randomly set the wallpaper using wal"""
# To run in cron:
# echo $DISPLAY
# echo $DBUS_SESSION_BUS_ADDRESS
# */15 * * * * DISPLAY=<display> DBUS_SESSION_BUS_ADDRESS=<dbus> PATH="/usr/bin:/path/to/rwall" RWALL_WALLPAPERS="/path/to/wallpapers" rwall -p -rp -b -z -d
import os
import random
import re
import subprocess
import sys
import shutil
import argparse

SCRIPT_DIR = f"{os.path.dirname(os.path.realpath(__file__))}/scripts"
WALLPAPER_DIR = os.getenv("RWALL_WALLPAPERS")

if WALLPAPER_DIR is None:
    print("rwall wallpaper directory not set")
    sys.exit(1)

def try_run_command(command):
    try:
        subprocess.run(command, check=True)
    except subprocess.CalledProcessError:
        print(f"ERROR: An error occurred when running {command}. See above output.")

def get_current_wallpaper():
    """Get the path of the current wallpaper"""
    wal_wallpaper_path = os.path.expanduser("~/.cache/wal/wal")
    with open(wal_wallpaper_path, "r", encoding="utf-8") as wal_file:
        current = wal_file.read().strip()
        return os.path.basename(current)

def read_file_contents(file):
    contents = ""
    with open(file, "r", encoding="utf-8") as f:
        contents = f.read()
    return contents

def get_wal_colours():
    wal_colours = os.path.expanduser("~/.cache/wal/colors")
    return read_file_contents(wal_colours).splitlines()

def reload_bspwm():
    """Resets the colour of BSPWM borders"""
    # We could use `bspc wm -r` but this resets the cursor to the center of the screen
    colours = get_wal_colours()
    try_run_command(["bspc", "config", "normal_border_color", colours[1]])
    try_run_command(["bspc", "config", "active_border_color", colours[2]])
    try_run_command(["bspc", "config", "focused_border_color", colours[15]])
    try_run_command(["bspc", "config", "presel_feedback_color", colours[1]])

def update_dunst():
    colours = get_wal_colours()
    dunstrc = os.path.expanduser("~/.config/dunst/dunstrc")
    if not os.path.isfile(dunstrc):
        print("ERROR: Dunstrc not found.")
        return
    dunstrc_contents = read_file_contents(dunstrc)
    new_contents = re.sub(r'background\s*=\s*"#([A-Fa-f0-9]{6})"', f"background = \"{colours[0]}\"", dunstrc_contents)
    new_contents = re.sub(r'foreground\s*=\s*"#([A-Fa-f0-9]{6})"', f"foreground = \"{colours[7]}\"", new_contents)
    with open(dunstrc, "w", encoding="utf-8") as f:
        f.write(new_contents)
    subprocess.run(["pkill", "-HUP", "dunst"], check=False)

def get_wallpaper_fullpath(wallpaper):
    """Get the fullpath of the given wallpaper"""
    return os.path.join(WALLPAPER_DIR, wallpaper)

def force_refresh_zed():
    """Generate the wal theme for Zed"""
    source = f"{SCRIPT_DIR}/zed-theme-wal/themes/wal-theme.json"
    destination = os.path.expanduser("~/.config/zed/themes/wal-theme.json")
    shutil.copy(source, destination)

def parse_args():
    parser = argparse.ArgumentParser("Randomly set a wallpaper using wal")
    parser.add_argument("-p", "--polybar", action="store_true", help="Adds wal colours to an ini file stored in the polybar config directory")
    parser.add_argument("-rp", "--powermenu", action="store_true", help="Generate styles for Rofi Powermenu")
    parser.add_argument("-b", "--bspwm", action="store_true", help="Reload BSPWM after wallpaper has been set")
    parser.add_argument("-z", "--zed", action="store_true", help="Generate Zed theme")
    parser.add_argument("-d", "--dunst", action="store_true", help="Generate Dunst styles")
    return parser.parse_args()

CURRENT_WALLPAPER = get_current_wallpaper()
ARGS = parse_args()

artwork = [f for f in os.listdir(WALLPAPER_DIR) if os.path.isfile(os.path.join(WALLPAPER_DIR, f))]
try:
    artwork.remove(CURRENT_WALLPAPER)
except ValueError:
    pass

random_wallpaper = random.choice(artwork)
wallpaper_path = get_wallpaper_fullpath(random_wallpaper)

subprocess.run(["wal", "-i", wallpaper_path], check=True)

if ARGS.polybar:
    try_run_command([f"{SCRIPT_DIR}/polybar"])

if ARGS.powermenu:
    try_run_command([f"{SCRIPT_DIR}/powermenu"])

if ARGS.bspwm:
    reload_bspwm()

if ARGS.zed:
    try_run_command([f"{SCRIPT_DIR}/zed-theme-wal/generate_theme"])
    force_refresh_zed()

if ARGS.dunst:
    update_dunst()

print(f"Wallpaper set to: {wallpaper_path}")
